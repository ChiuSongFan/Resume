from scipy.stats import binom
import math
from numba import jit
def calculate_component_list(component):
    Componentlist = []
    for i in component:
        Pcomponent = []
        if i != 0:
            for j in range(0, i + 1):
                a = binom.pmf(j, i, 0.99)
                rounded_number = math.ceil(a * (10 ** 3)) / (10 ** 3)
                Pcomponent.append(rounded_number)
            if sum(Pcomponent)!=1:
                Pcomponent[-1] -=sum(Pcomponent)-1
            Pcomponent[-1] = round(Pcomponent[-1], 2)
            Componentlist.append(Pcomponent)
        else:
            a = 1
            Pcomponent.append(a)
            Componentlist.append(Pcomponent)
    return Componentlist
class SystemReliability:
    def __init__(self, componentlist):
        self.componentlist = componentlist
    
    def s(self, x):
        return x[0]
    def find_combinations(self, sum_val, max_val, num_vals):
        if num_vals == 1:
            if 0 <= sum_val <= max_val[0]:
                yield [sum_val]
        else:
            for i in range(max_val[0]+1):
                if sum_val-i >= 0:
                    for comb in self.find_combinations(sum_val-i, max_val[1:], num_vals-1):
                        yield [i] + comb
    def generate_DMC(self, M, pos, Demand, K):
        ans = []
        for i in range(len(K)):
            positions = K[i]
            NEW_M = M.copy()
            combinations = list(self.find_combinations(Demand, positions, len(positions)))
            combinations.sort(reverse=True, key=self.s)
            ans.append(combinations)

        DMC = []
        for i, p_list in enumerate(pos):
            for x_list in ans[i]:
                M_new = M.copy()
                for j, p in enumerate(p_list):
                    M_new[p] = x_list[j]
                DMC.append(M_new)

        return DMC
    def find_upperboundary(self, a):
        upperboundary = []
        I = set()
        for i, ai in enumerate(a):
            if i not in I:
                for j, aj in enumerate(a[i+1:], start=i+1):
                    if j not in I:
                        temp = [x-y for x, y in zip(ai, aj)]
                        if all(t >= 0 for t in temp):
                            I.add(j)
                            if ai not in upperboundary:
                                upperboundary.append(ai)
        return upperboundary
    def rsdp_reliability(self, Demandlist,componentlist):
        def RSDP(x, componentlist):
            TM1 = 1
            for i, j in enumerate(x):
                x_sum = 0
                for k in range(j, len(componentlist[i])):
                    x_sum += componentlist[i][k]
                TM1 *= x_sum
            return TM1
        
        Pr = 0
        for i in range(len(Demandlist)):
            TMi = RSDP(Demandlist[i], self.componentlist)
            if i > 0:
                Yi = [max(a,b) for a, b in zip(Demandlist[i], Demandlist[i-1])]
                TMi -= RSDP(Yi, self.componentlist)
            Pr += TMi
        return Pr
if __name__ == '__main__':
#輸入所有arc的最大capacity跟所有MC以及MC中是哪幾個arc
    import pandas as pd
    import numpy as np
    from initial import initial

    data = pd.read_csv('data.csv')
    kind = pd.read_csv('totallykind.csv')
    cost = data['c'].to_numpy()
    amount = kind['ks'].to_numpy()
    arc = kind['arc'].to_numpy()
    cs = data['r'].to_numpy()
    #輸入所有arc的最大capacity跟所有MC以及MC中是哪幾個arc
    for i in range(1):
        Demand = 10
        M = initial(arc)
        K = [[M[0],M[5],M[10]],[M[0],M[5],M[11]],[M[0],M[5],M[12]],[M[0],M[5],M[13]],[M[0],M[5],M[14]],[M[0],M[6],M[10]],[M[0],M[6],M[11]],[M[0],M[6],M[12]],[M[0],M[6],M[13]],[M[0],M[6],M[14]],[M[0],M[7],M[10]],[M[0],M[7],M[11]],[M[0],M[7],M[12]],[M[0],M[7],M[13]],[M[0],M[7],M[14]],[M[0],M[8],M[10]],[M[0],M[8],M[11]],[M[0],M[8],M[12]],[M[0],M[8],M[13]],[M[0],M[8],M[14]],[M[0],M[9],M[10]],[M[0],M[9],M[11]],[M[0],M[9],M[12]],[M[0],M[9],M[13]],[M[0],M[9],M[14]],[M[1],M[5],M[10]],[M[1],M[5],M[11]],[M[1],M[5],M[12]],[M[1],M[5],M[13]],[M[1],M[5],M[14]],[M[1],M[6],M[10]],[M[1],M[6],M[11]],[M[1],M[6],M[12]],[M[1],M[6],M[13]],[M[1],M[6],M[14]],[M[1],M[7],M[10]],[M[1],M[7],M[11]],[M[1],M[7],M[12]],[M[1],M[7],M[13]],[M[1],M[7],M[14]],[M[1],M[8],M[10]],[M[1],M[8],M[11]],[M[1],M[8],M[12]],[M[1],M[8],M[13]],[M[1],M[8],M[14]],[M[1],M[9],M[10]],[M[1],M[9],M[11]],[M[1],M[9],M[12]],[M[1],M[9],M[13]],[M[1],M[9],M[14]],[M[0],M[2],M[5],M[10]],[M[0],M[2],M[5],M[11]],[M[0],M[2],M[5],M[12]],[M[0],M[2],M[5],M[13]],[M[0],M[2],M[5],M[14]],[M[0],M[2],M[6],M[10]],[M[0],M[2],M[6],M[11]],[M[0],M[2],M[6],M[12]],[M[0],M[2],M[6],M[13]],[M[0],M[2],M[6],M[14]],[M[0],M[2],M[7],M[10]],[M[0],M[2],M[7],M[11]],[M[0],M[2],M[7],M[12]],[M[0],M[2],M[7],M[13]],[M[0],M[2],M[7],M[14]],[M[0],M[2],M[8],M[10]],[M[0],M[2],M[8],M[11]],[M[0],M[2],M[8],M[12]],[M[0],M[2],M[8],M[13]],[M[0],M[2],M[8],M[14]],[M[0],M[2],M[9],M[10]],[M[0],M[2],M[9],M[11]],[M[0],M[2],M[9],M[12]],[M[0],M[2],M[9],M[13]],[M[0],M[2],M[9],M[14]],[M[3],M[5],M[10]],[M[3],M[5],M[11]],[M[3],M[5],M[12]],[M[3],M[5],M[13]],[M[3],M[5],M[14]],[M[3],M[6],M[10]],[M[3],M[6],M[11]],[M[3],M[6],M[12]],[M[3],M[6],M[13]],[M[3],M[6],M[14]],[M[3],M[7],M[10]],[M[3],M[7],M[11]],[M[3],M[7],M[12]],[M[3],M[7],M[13]],[M[3],M[7],M[14]],[M[3],M[8],M[10]],[M[3],M[8],M[11]],[M[3],M[8],M[12]],[M[3],M[8],M[13]],[M[3],M[8],M[14]],[M[3],M[9],M[10]],[M[3],M[9],M[11]],[M[3],M[9],M[12]],[M[3],M[9],M[13]],[M[3],M[9],M[14]],[M[0],M[4],M[5],M[10]],[M[0],M[4],M[5],M[11]],[M[0],M[4],M[5],M[12]],[M[0],M[4],M[5],M[13]],[M[0],M[4],M[5],M[14]],[M[0],M[4],M[6],M[10]],[M[0],M[4],M[6],M[11]],[M[0],M[4],M[6],M[12]],[M[0],M[4],M[6],M[13]],[M[0],M[4],M[6],M[14]],[M[0],M[4],M[7],M[10]],[M[0],M[4],M[7],M[11]],[M[0],M[4],M[7],M[12]],[M[0],M[4],M[7],M[13]],[M[0],M[4],M[7],M[14]],[M[0],M[4],M[8],M[10]],[M[0],M[4],M[8],M[11]],[M[0],M[4],M[8],M[12]],[M[0],M[4],M[8],M[13]],[M[0],M[4],M[8],M[14]],[M[0],M[4],M[9],M[10]],[M[0],M[4],M[9],M[11]],[M[0],M[4],M[9],M[12]],[M[0],M[4],M[9],M[13]],[M[0],M[4],M[9],M[14]],[M[15],M[17],M[19],M[21],M[23]],[M[15],M[17],M[19],M[21],M[24]],[M[15],M[17],M[19],M[22],M[23]],[M[15],M[17],M[19],M[22],M[24]],[M[15],M[17],M[20],M[21],M[23]],[M[15],M[17],M[20],M[21],M[24]],[M[15],M[17],M[20],M[22],M[23]],[M[15],M[17],M[20],M[22],M[24]],[M[15],M[18],M[19],M[21],M[23]],[M[15],M[18],M[19],M[21],M[24]],[M[15],M[18],M[19],M[22],M[23]],[M[15],M[18],M[19],M[22],M[24]],[M[15],M[18],M[20],M[21],M[23]],[M[15],M[18],M[20],M[21],M[24]],[M[15],M[18],M[20],M[22],M[23]],[M[15],M[18],M[20],M[22],M[24]],[M[16],M[17],M[19],M[21],M[23]],[M[16],M[17],M[19],M[21],M[24]],[M[16],M[17],M[19],M[22],M[23]],[M[16],M[17],M[19],M[22],M[24]],[M[16],M[17],M[20],M[21],M[23]],[M[16],M[17],M[20],M[21],M[24]],[M[16],M[17],M[20],M[22],M[23]],[M[16],M[17],M[20],M[22],M[24]],[M[16],M[18],M[19],M[21],M[23]],[M[16],M[18],M[19],M[21],M[24]],[M[16],M[18],M[19],M[22],M[23]],[M[16],M[18],M[19],M[22],M[24]],[M[16],M[18],M[20],M[21],M[23]],[M[16],M[18],M[20],M[21],M[24]],[M[16],M[18],M[20],M[22],M[23]],[M[16],M[18],M[20],M[22],M[24]],[M[25],M[30],M[35]],[M[25],M[30],M[36]],[M[25],M[30],M[37]],[M[25],M[30],M[38]],[M[25],M[30],M[39]],[M[25],M[31],M[35]],[M[25],M[31],M[36]],[M[25],M[31],M[37]],[M[25],M[31],M[38]],[M[25],M[31],M[39]],[M[25],M[32],M[35]],[M[25],M[32],M[36]],[M[25],M[32],M[37]],[M[25],M[32],M[38]],[M[25],M[32],M[39]],[M[25],M[33],M[35]],[M[25],M[33],M[36]],[M[25],M[33],M[37]],[M[25],M[33],M[38]],[M[25],M[33],M[39]],[M[25],M[34],M[35]],[M[25],M[34],M[36]],[M[25],M[34],M[37]],[M[25],M[34],M[38]],[M[25],M[34],M[39]],[M[26],M[30],M[35]],[M[26],M[30],M[36]],[M[26],M[30],M[37]],[M[26],M[30],M[38]],[M[26],M[30],M[39]],[M[26],M[31],M[35]],[M[26],M[31],M[36]],[M[26],M[31],M[37]],[M[26],M[31],M[38]],[M[26],M[31],M[39]],[M[26],M[32],M[35]],[M[26],M[32],M[36]],[M[26],M[32],M[37]],[M[26],M[32],M[38]],[M[26],M[32],M[39]],[M[26],M[33],M[35]],[M[26],M[33],M[36]],[M[26],M[33],M[37]],[M[26],M[33],M[38]],[M[26],M[33],M[39]],[M[26],M[34],M[35]],[M[26],M[34],M[36]],[M[26],M[34],M[37]],[M[26],M[34],M[38]],[M[26],M[34],M[39]],[M[25],M[27],M[30],M[35]],[M[25],M[27],M[30],M[36]],[M[25],M[27],M[30],M[37]],[M[25],M[27],M[30],M[38]],[M[25],M[27],M[30],M[39]],[M[25],M[27],M[31],M[35]],[M[25],M[27],M[31],M[36]],[M[25],M[27],M[31],M[37]],[M[25],M[27],M[31],M[38]],[M[25],M[27],M[31],M[39]],[M[25],M[27],M[32],M[35]],[M[25],M[27],M[32],M[36]],[M[25],M[27],M[32],M[37]],[M[25],M[27],M[32],M[38]],[M[25],M[27],M[32],M[39]],[M[25],M[27],M[33],M[35]],[M[25],M[27],M[33],M[36]],[M[25],M[27],M[33],M[37]],[M[25],M[27],M[33],M[38]],[M[25],M[27],M[33],M[39]],[M[25],M[27],M[34],M[35]],[M[25],M[27],M[34],M[36]],[M[25],M[27],M[34],M[37]],[M[25],M[27],M[34],M[38]],[M[25],M[27],M[34],M[39]],[M[28],M[30],M[35]],[M[28],M[30],M[36]],[M[28],M[30],M[37]],[M[28],M[30],M[38]],[M[28],M[30],M[39]],[M[28],M[31],M[35]],[M[28],M[31],M[36]],[M[28],M[31],M[37]],[M[28],M[31],M[38]],[M[28],M[31],M[39]],[M[28],M[32],M[35]],[M[28],M[32],M[36]],[M[28],M[32],M[37]],[M[28],M[32],M[38]],[M[28],M[32],M[39]],[M[28],M[33],M[35]],[M[28],M[33],M[36]],[M[28],M[33],M[37]],[M[28],M[33],M[38]],[M[28],M[33],M[39]],[M[28],M[34],M[35]],[M[28],M[34],M[36]],[M[28],M[34],M[37]],[M[28],M[34],M[38]],[M[28],M[34],M[39]],[M[25],M[29],M[30],M[35]],[M[25],M[29],M[30],M[36]],[M[25],M[29],M[30],M[37]],[M[25],M[29],M[30],M[38]],[M[25],M[29],M[30],M[39]],[M[25],M[29],M[31],M[35]],[M[25],M[29],M[31],M[36]],[M[25],M[29],M[31],M[37]],[M[25],M[29],M[31],M[38]],[M[25],M[29],M[31],M[39]],[M[25],M[29],M[32],M[35]],[M[25],M[29],M[32],M[36]],[M[25],M[29],M[32],M[37]],[M[25],M[29],M[32],M[38]],[M[25],M[29],M[32],M[39]],[M[25],M[29],M[33],M[35]],[M[25],M[29],M[33],M[36]],[M[25],M[29],M[33],M[37]],[M[25],M[29],M[33],M[38]],[M[25],M[29],M[33],M[39]],[M[25],M[29],M[34],M[35]],[M[25],M[29],M[34],M[36]],[M[25],M[29],M[34],M[37]],[M[25],M[29],M[34],M[38]],[M[25],M[29],M[34],M[39]],[M[40]],[M[41],M[44],M[47]],[M[41],M[44],M[48]],[M[41],M[44],M[49]],[M[41],M[45],M[47]],[M[41],M[45],M[48]],[M[41],M[45],M[49]],[M[41],M[46],M[47]],[M[41],M[46],M[48]],[M[41],M[46],M[49]],[M[42],M[44],M[47]],[M[42],M[44],M[48]],[M[42],M[44],M[49]],[M[42],M[45],M[47]],[M[42],M[45],M[48]],[M[42],M[45],M[49]],[M[42],M[46],M[47]],[M[42],M[46],M[48]],[M[42],M[46],M[49]],[M[43],M[44],M[47]],[M[43],M[44],M[48]],[M[43],M[44],M[49]],[M[43],M[45],M[47]],[M[43],M[45],M[48]],[M[43],M[45],M[49]],[M[43],M[46],M[47]],[M[43],M[46],M[48]],[M[43],M[46],M[49]]]
        pos =[[0,5,10],[0,5,11],[0,5,12],[0,5,13],[0,5,14],[0,6,10],[0,6,11],[0,6,12],[0,6,13],[0,6,14],[0,7,10],[0,7,11],[0,7,12],[0,7,13],[0,7,14],[0,8,10],[0,8,11],[0,8,12],[0,8,13],[0,8,14],[0,9,10],[0,9,11],[0,9,12],[0,9,13],[0,9,14],[1,5,10],[1,5,11],[1,5,12],[1,5,13],[1,5,14],[1,6,10],[1,6,11],[1,6,12],[1,6,13],[1,6,14],[1,7,10],[1,7,11],[1,7,12],[1,7,13],[1,7,14],[1,8,10],[1,8,11],[1,8,12],[1,8,13],[1,8,14],[1,9,10],[1,9,11],[1,9,12],[1,9,13],[1,9,14],[0,2,5,10],[0,2,5,11],[0,2,5,12],[0,2,5,13],[0,2,5,14],[0,2,6,10],[0,2,6,11],[0,2,6,12],[0,2,6,13],[0,2,6,14],[0,2,7,10],[0,2,7,11],[0,2,7,12],[0,2,7,13],[0,2,7,14],[0,2,8,10],[0,2,8,11],[0,2,8,12],[0,2,8,13],[0,2,8,14],[0,2,9,10],[0,2,9,11],[0,2,9,12],[0,2,9,13],[0,2,9,14],[3,5,10],[3,5,11],[3,5,12],[3,5,13],[3,5,14],[3,6,10],[3,6,11],[3,6,12],[3,6,13],[3,6,14],[3,7,10],[3,7,11],[3,7,12],[3,7,13],[3,7,14],[3,8,10],[3,8,11],[3,8,12],[3,8,13],[3,8,14],[3,9,10],[3,9,11],[3,9,12],[3,9,13],[3,9,14],[0,4,5,10],[0,4,5,11],[0,4,5,12],[0,4,5,13],[0,4,5,14],[0,4,6,10],[0,4,6,11],[0,4,6,12],[0,4,6,13],[0,4,6,14],[0,4,7,10],[0,4,7,11],[0,4,7,12],[0,4,7,13],[0,4,7,14],[0,4,8,10],[0,4,8,11],[0,4,8,12],[0,4,8,13],[0,4,8,14],[0,4,9,10],[0,4,9,11],[0,4,9,12],[0,4,9,13],[0,4,9,14],[15,17,19,21,23],[15,17,19,21,24],[15,17,19,22,23],[15,17,19,22,24],[15,17,20,21,23],[15,17,20,21,24],[15,17,20,22,23],[15,17,20,22,24],[15,18,19,21,23],[15,18,19,21,24],[15,18,19,22,23],[15,18,19,22,24],[15,18,20,21,23],[15,18,20,21,24],[15,18,20,22,23],[15,18,20,22,24],[16,17,19,21,23],[16,17,19,21,24],[16,17,19,22,23],[16,17,19,22,24],[16,17,20,21,23],[16,17,20,21,24],[16,17,20,22,23],[16,17,20,22,24],[16,18,19,21,23],[16,18,19,21,24],[16,18,19,22,23],[16,18,19,22,24],[16,18,20,21,23],[16,18,20,21,24],[16,18,20,22,23],[16,18,20,22,24],[25,30,35],[25,30,36],[25,30,37],[25,30,38],[25,30,39],[25,31,35],[25,31,36],[25,31,37],[25,31,38],[25,31,39],[25,32,35],[25,32,36],[25,32,37],[25,32,38],[25,32,39],[25,33,35],[25,33,36],[25,33,37],[25,33,38],[25,33,39],[25,34,35],[25,34,36],[25,34,37],[25,34,38],[25,34,39],[26,30,35],[26,30,36],[26,30,37],[26,30,38],[26,30,39],[26,31,35],[26,31,36],[26,31,37],[26,31,38],[26,31,39],[26,32,35],[26,32,36],[26,32,37],[26,32,38],[26,32,39],[26,33,35],[26,33,36],[26,33,37],[26,33,38],[26,33,39],[26,34,35],[26,34,36],[26,34,37],[26,34,38],[26,34,39],[25,27,30,35],[25,27,30,36],[25,27,30,37],[25,27,30,38],[25,27,30,39],[25,27,31,35],[25,27,31,36],[25,27,31,37],[25,27,31,38],[25,27,31,39],[25,27,32,35],[25,27,32,36],[25,27,32,37],[25,27,32,38],[25,27,32,39],[25,27,33,35],[25,27,33,36],[25,27,33,37],[25,27,33,38],[25,27,33,39],[25,27,34,35],[25,27,34,36],[25,27,34,37],[25,27,34,38],[25,27,34,39],[28,30,35],[28,30,36],[28,30,37],[28,30,38],[28,30,39],[28,31,35],[28,31,36],[28,31,37],[28,31,38],[28,31,39],[28,32,35],[28,32,36],[28,32,37],[28,32,38],[28,32,39],[28,33,35],[28,33,36],[28,33,37],[28,33,38],[28,33,39],[28,34,35],[28,34,36],[28,34,37],[28,34,38],[28,34,39],[25,29,30,35],[25,29,30,36],[25,29,30,37],[25,29,30,38],[25,29,30,39],[25,29,31,35],[25,29,31,36],[25,29,31,37],[25,29,31,38],[25,29,31,39],[25,29,32,35],[25,29,32,36],[25,29,32,37],[25,29,32,38],[25,29,32,39],[25,29,33,35],[25,29,33,36],[25,29,33,37],[25,29,33,38],[25,29,33,39],[25,29,34,35],[25,29,34,36],[25,29,34,37],[25,29,34,38],[25,29,34,39],[40],[41,44,47],[41,44,48],[41,44,49],[41,45,47],[41,45,48],[41,45,49],[41,46,47],[41,46,48],[41,46,49],[42,44,47],[42,44,48],[42,44,49],[42,45,47],[42,45,48],[42,45,49],[42,46,47],[42,46,48],[42,46,49],[43,44,47],[43,44,48],[43,44,49],[43,45,47],[43,45,48],[43,45,49],[43,46,47],[43,46,48],[43,46,49]]
        Componentlist = calculate_component_list(M)
        #M = [4, 4, 4, 4, 4, 4, 6, 6]
        #Componentlist = [[0.1] * i for i in M]
        # print(Componentlist)，隨機數
        s = SystemReliability(Componentlist)
        DMC = SystemReliability.generate_DMC(s,M, pos, Demand, K)
        Demandlist =SystemReliability.find_upperboundary(s,DMC)
        print(Demandlist)
        # reliability = SystemReliability.rsdp_reliability(s,Demandlist,Componentlist)
        # print(reliability)
#論文上寫0.57972996
# ans = []
# for i in range(len(K)):
#     positions = K[i]
#     NEW_M = M.copy()
#     combinations = list(find_combinations(Demand, positions, len(positions)))
#     combinations.sort(reverse=True ,key=lambda s: s[0])
#     ans.append(combinations)
# DMC=[]
# for i, p_list in enumerate(pos):
#     for x_list in ans[i]:
#         M_new = M.copy()
#         for j, p in enumerate(p_list):
#             M_new[p] = x_list[j]
#         DMC.append(M_new)
